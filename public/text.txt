 {
    "name": "Platform Launch",
    "isActive" : false,
    "columns": [
      {
        "name": "Todo",
        "tasks": [
          {
            "title": "Build UI for onboarding flow",
            "description": "",
            "status": "Todo",
            "subtasks": [
              {
                "title": "Sign up page",
                "isCompleted": true
              },
              {
                "title": "Sign in page",
                "isCompleted": false
              },
              {
                "title": "Welcome page",
                "isCompleted": false
              }
            ]
          },
          {
            "title": "Build UI for search",
            "description": "",
            "status": "Todo",
            "subtasks": [
              {
                "title": "Search page",
                "isCompleted": false
              }
            ]
          },
          {
            "title": "Build settings UI",
            "description": "",
            "status": "Todo",
            "subtasks": [
              {
                "title": "Account page",
                "isCompleted": false
              },
              {
                "title": "Billing page",
                "isCompleted": false
              }
            ]
          },
          {
            "title": "QA and test all major user journeys",
            "description": "Once we feel version one is ready, we need to rigorously test it both internally and externally to identify any major gaps.",
            "status": "Todo",
            "subtasks": [
              {
                "title": "Internal testing",
                "isCompleted": false
              },
              {
                "title": "External testing",
                "isCompleted": false
              }
            ]
          }
        ]
      },
      {
        "name": "Doing",
        "tasks": [
          {
            "title": "Design settings and search pages",
            "description": "",
            "status": "Doing",
            "subtasks": [
              {
                "title": "Settings - Account page",
                "isCompleted": true
              },
              {
                "title": "Settings - Billing page",
                "isCompleted": true
              },
              {
                "title": "Search page",
                "isCompleted": false
              }
            ]
          },
          {
            "title": "Add account management endpoints",
            "description": "",
            "status": "Doing",
            "subtasks": [
              {
                "title": "Upgrade plan",
                "isCompleted": true
              },
              {
                "title": "Cancel plan",
                "isCompleted": true
              },
              {
                "title": "Update payment method",
                "isCompleted": false
              }
            ]
          },
          {
            "title": "Design onboarding flow",
            "description": "",
            "status": "Doing",
            "subtasks": [
              {
                "title": "Sign up page",
                "isCompleted": true
              },
              {
                "title": "Sign in page",
                "isCompleted": false
              },
              {
                "title": "Welcome page",
                "isCompleted": false
              }
            ]
          },
          {
            "title": "Add search enpoints",
            "description": "",
            "status": "Doing",
            "subtasks": [
              {
                "title": "Add search endpoint",
                "isCompleted": true
              },
              {
                "title": "Define search filters",
                "isCompleted": false
              }
            ]
          },
          {
            "title": "Add authentication endpoints",
            "description": "",
            "status": "Doing",
            "subtasks": [
              {
                "title": "Define user model",
                "isCompleted": true
              },
              {
                "title": "Add auth endpoints",
                "isCompleted": false
              }
            ]
          },
          {
            "title": "Research pricing points of various competitors and trial different business models",
            "description": "We know what we're planning to build for version one. Now we need to finalise the first pricing model we'll use. Keep iterating the subtasks until we have a coherent proposition.",
            "status": "Doing",
            "subtasks": [
              {
                "title": "Research competitor pricing and business models",
                "isCompleted": true
              },
              {
                "title": "Outline a business model that works for our solution",
                "isCompleted": false
              },
              {
                "title": "Talk to potential customers about our proposed solution and ask for fair price expectancy",
                "isCompleted": false
              }
            ]
          }
        ]
      },
      {
        "name": "Done",
        "tasks": [
          {
            "title": "Conduct 5 wireframe tests",
            "description": "Ensure the layout continues to make sense and we have strong buy-in from potential users.",
            "status": "Done",
            "subtasks": [
              {
                "title": "Complete 5 wireframe prototype tests",
                "isCompleted": true
              }
            ]
          },
          {
            "title": "Create wireframe prototype",
            "description": "Create a greyscale clickable wireframe prototype to test our asssumptions so far.",
            "status": "Done",
            "subtasks": [
              {
                "title": "Create clickable wireframe prototype in Balsamiq",
                "isCompleted": true
              }
            ]
          },
          {
            "title": "Review results of usability tests and iterate",
            "description": "Keep iterating through the subtasks until we're clear on the core concepts for the app.",
            "status": "Done",
            "subtasks": [
              {
                "title": "Meet to review notes from previous tests and plan changes",
                "isCompleted": true
              },
              {
                "title": "Make changes to paper prototypes",
                "isCompleted": true
              },
              {
                "title": "Conduct 5 usability tests",
                "isCompleted": true
              }
            ]
          },
          {
            "title": "Create paper prototypes and conduct 10 usability tests with potential customers",
            "description": "",
            "status": "Done",
            "subtasks": [
              {
                "title": "Create paper prototypes for version one",
                "isCompleted": true
              },
              {
                "title": "Complete 10 usability tests",
                "isCompleted": true
              }
            ]
          },
          {
            "title": "Market discovery",
            "description": "We need to define and refine our core product. Interviews will help us learn common pain points and help us define the strongest MVP.",
            "status": "Done",
            "subtasks": [
              {
                "title": "Interview 10 prospective customers",
                "isCompleted": true
              }
            ]
          },
          {
            "title": "Competitor analysis",
            "description": "",
            "status": "Done",
            "subtasks": [
              {
                "title": "Find direct and indirect competitors",
                "isCompleted": true
              },
              {
                "title": "SWOT analysis for each competitor",
                "isCompleted": true
              }
            ]
          },
          {
            "title": "Research the market",
            "description": "We need to get a solid overview of the market to ensure we have up-to-date estimates of market size and demand.",
            "status": "Done",
            "subtasks": [
              {
                "title": "Write up research analysis",
                "isCompleted": true
              },
              {
                "title": "Calculate TAM",
                "isCompleted": true
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "name": "Marketing Plan",
    "isActive" : false,
    "columns": [
      {
        "name": "Todo",
        "tasks": [
          {
            "title": "Plan Product Hunt launch",
            "description": "",
            "status": "Todo",
            "subtasks": [
              {
                "title": "Find hunter",
                "isCompleted": false
              },
              {
                "title": "Gather assets",
                "isCompleted": false
              },
              {
                "title": "Draft product page",
                "isCompleted": false
              },
              {
                "title": "Notify customers",
                "isCompleted": false
              },
              {
                "title": "Notify network",
                "isCompleted": false
              },
              {
                "title": "Launch!",
                "isCompleted": false
              }
            ]
          },
          {
            "title": "Share on Show HN",
            "description": "",
            "status": "",
            "subtasks": [
              {
                "title": "Draft out HN post",
                "isCompleted": false
              },
              {
                "title": "Get feedback and refine",
                "isCompleted": false
              },
              {
                "title": "Publish post",
                "isCompleted": false
              }
            ]
          },
          {
            "title": "Write launch article to publish on multiple channels",
            "description": "",
            "status": "",
            "subtasks": [
              {
                "title": "Write article",
                "isCompleted": false
              },
              {
                "title": "Publish on LinkedIn",
                "isCompleted": false
              },
              {
                "title": "Publish on Inndie Hackers",
                "isCompleted": false
              },
              {
                "title": "Publish on Medium",
                "isCompleted": false
              }
            ]
          }
        ]
      },
      {
        "name": "Doing",
        "tasks": []
      },
      {
        "name": "Done",
        "tasks": []
      }
    ]
  },



import React, { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Switch } from "@headlessui/react";
import boardIcon from "../assets/icon-board.svg";
import useDarkMode from "../hooks/useDarkMode";
import darkIcon from "../assets/icon-dark-theme.svg";
import lightIcon from "../assets/icon-light-theme.svg";

import showSidebarIcon from "../assets/icon-show-sidebar.svg";
import hideSidebarIcon from "../assets/icon-hide-sidebar.svg";

import boardsSlice from "../redux/boardsSlice";
import AddEditBoardModal from "../modals/AddEditBoardModal";

function Sidebar({ isSideBarOpen, setIsSideBarOpen }) {
  const dispatch = useDispatch();
  const [isBoardModalOpen, setIsBoardModalOpen] = useState(false);
  const [colorTheme, setTheme] = useDarkMode();
  const [darkSide, setDarkSide] = useState(
    colorTheme === "light" ? true : false
  );

  const toggleDarkMode = (checked) => {
    setTheme(colorTheme);
    setDarkSide(checked);
  };

  const boards = useSelector((state) => state.boards);

  const toggleSidebar = () => {
    setIsSideBarOpen((curr) => !curr);
  };

  return (
    <div>
      <div
        className={
          isSideBarOpen
            ? `min-w-[261px] bg-white dark:bg-[#2b2c37]  fixed top-[72px] h-screen  items-center left-0 z-20`
            : ` bg-[#635FC7] dark:bg-[#2b2c37] dark:hover:bg-[#635FC7] top-auto bottom-10 justify-center items-center hover:opacity-80 cursor-pointer  p-0 transition duration-300 transform fixed felx w-[56px] h-[48px] rounded-r-full  `
        }
      >
        <div>
          {/* reWrite modal  */}

          {isSideBarOpen && (
            <div className=" bg-white  dark:bg-[#2b2c37]    w-full   py-4 rounded-xl">
              <h3 className=" dark:text-gray-300 text-gray-600 font-semibold mx-4 mb-8 ">
                ALL BOARDS ({boards?.length})
              </h3>

              <div className="  dropdown-borad flex flex-col h-[70vh]  justify-between ">
                <div>
                  {boards.map((board, index) => (
                    <div
                      className={` flex items-baseline space-x-2 px-5 mr-8 rounded-r-full duration-500 ease-in-out py-4 cursor-pointer hover:bg-[#635fc71a] hover:text-[#635fc7] dark:hover:bg-white dark:hover:text-[#635fc7] dark:text-white  ${
                        board.isActive &&
                        " bg-[#635fc7] rounded-r-full text-white mr-8 "
                      } `}
                      key={index}
                      onClick={() => {
                        dispatch(boardsSlice.actions.setBoardActive({ index }));
                      }}
                    >
                      <img src={boardIcon} className="  filter-white  h-4 " />{" "}
                      <p className=" text-lg font-bold ">{board.name}</p>
                    </div>
                  ))}

                  <div
                    className=" flex  items-baseline space-x-2  mr-8 rounded-r-full duration-500 ease-in-out cursor-pointer text-[#635fc7] px-5 py-4 hover:bg-[#635fc71a] hover:text-[#635fc7] dark:hover:bg-white  "
                    onClick={() => {
                      setIsBoardModalOpen(true);
                    }}
                  >
                    <img src={boardIcon} className="   filter-white  h-4 " />
                    <p className=" text-lg font-bold  ">Create New Board </p>
                  </div>
                </div>

                <div className=" mx-2  p-4 relative space-x-2 bg-slate-100 dark:bg-[#20212c] flex justify-center items-center rounded-lg">
                  <img src={lightIcon} alt="sun indicating light mode" />

                  <Switch
                    checked={darkSide}
                    onChange={toggleDarkMode}
                    className={`${
                      darkSide ? "bg-[#635fc7]" : "bg-gray-200"
                    } relative inline-flex h-6 w-11 items-center rounded-full`}
                  >
                    <span
                      className={`${
                        darkSide ? "translate-x-6" : "translate-x-1"
                      } inline-block h-4 w-4 transform rounded-full bg-white transition`}
                    />
                  </Switch>

                  <img src={darkIcon} alt="moon indicating dark mode" />
                </div>
              </div>
            </div>
          )}

          {/* Sidebar hide/show toggle */}
          {isSideBarOpen ? (
            <div
              onClick={() => toggleSidebar()}
              className=" flex  items-center mt-2  absolute bottom-16  text-lg font-bold  rounded-r-full hover:text-[#635FC7] cursor-pointer mr-6 mb-8 px-8 py-4 hover:bg-[#635fc71a] dark:hover:bg-white  space-x-2 justify-center  my-4 text-gray-500 "
            >
              <img
                className=" min-w-[20px]"
                src={hideSidebarIcon}
                alt=" side bar show/hide"
              />
              {isSideBarOpen && <p> Hide Sidebar </p>}
            </div>
          ) : (
            <div className=" absolute p-5  " onClick={() => toggleSidebar()}>
              <img src={showSidebarIcon} alt="showSidebarIcon" />
            </div>
          )}
        </div>
      </div>

      {isBoardModalOpen && (
        <AddEditBoardModal
          type="add"
          setIsBoardModalOpen={setIsBoardModalOpen}
        />
      )}
    </div>
  );
}

export default Sidebar;